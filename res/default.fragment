#version 330

#define POINT_LIGHTS_AMOUNT	8

struct Material {
	vec3 specular, diffuse, ambient;
	float shininess;
};

struct PointLight {
	vec3 specular, diffuse, ambient;
	vec3 position;
	vec3 attenuation;
};

uniform vec3 viewPos;

uniform int lightMask;
uniform PointLight lights[POINT_LIGHTS_AMOUNT];
uniform Material material;

in vec3 fragPos;
in vec3 fragNormal;

out vec4 fragColor;

vec3 normal;

vec3 calculatePointLight(PointLight light) {
	vec3 lightDir = light.position - fragPos;
	float distance = length(light.position - fragPos);
	lightDir /= distance;

	// diffuse
	float diffuseIntensity = clamp(dot(lightDir, normal), 0, 1);
	vec3 diffuse = light.diffuse * material.diffuse * diffuseIntensity;

	// specular
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectionDir = reflect(-lightDir, normal);
	float specularIntensity = pow(max(dot(viewDir, reflectionDir), 0), material.shininess);
	vec3 specular = light.specular * material.specular * specularIntensity;

	// ambient
	vec3 ambient = light.ambient * material.ambient;

	float attenuationFactor = 1.0f / (light.attenuation.x + (light.attenuation.y * distance)); //(light.attenuation.x + (distance * light.attenuation.y) + (pow(distance, 2) * light.attenuation.z));

	diffuse *= attenuationFactor;
	specular *= attenuationFactor;
	ambient *= attenuationFactor;

	return (diffuse + specular + ambient);
}

void main() {
	normal = normalize(fragNormal);
	vec3 res = vec3(0);
	for (int i = 0; i < POINT_LIGHTS_AMOUNT; i++) {
		if ((int(pow(2, i)) & lightMask) != 0) {
			res += calculatePointLight(lights[i]);
		}
	}
	fragColor = vec4(res, 1);
}

